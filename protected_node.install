<?php
/*
 * @file
 * Protected node module: install the protected nodes schema.
 */

/**
 * Implementation of hook_requirements().
 *
 * Checks whether any role has access to protected nodes.
 *
 * @link http://api.drupal.org/api/function/hook_requirements/6
 *
 * @param string $phase  The current phase.
 */
function protected_node_requirements($phase) {
  $reqs = array();

  if ($phase == 'runtime') {
    // test whether any roles were given rights to the handle protected nodes

    // Note: since this is the runtime phase we do not have to force a
    //       load of the .module file.
    $perms = protected_node_perm();

    $likes = array();
    foreach ($perms as $perm) {
      $likes[] = "perm LIKE '%" . $perm . "%'";
    }
    $sql = "SELECT COUNT(rid) FROM {permission} WHERE " . implode(' OR ', $likes);
    $roles = db_result(db_query($sql));
    if ($roles) {
      $reqs['protected_node_rights'] = array(
        'title' => t('Protected nodes access rights'),
        'value' => format_plural($roles, 'One role has access to protected nodes. (!edit)',
                                         '@count roles have access to protected nodes. (!edit)',
              array('!edit' => l('edit permissions',
                               'admin/user/permissions',
                               array('fragment' => 'module-protected_node')))),
        'severity' => REQUIREMENT_OK
      );
    }
    else {
      $reqs['protected_node_rights'] = array(
        'title' => t('Protected nodes access rights'),
        'value' => t('None of the existing roles has !access',
          array('!access' => l('permission to access protected nodes',
                               'admin/user/permissions',
                               array('fragment' => 'module-protected_node'))
          )
        ),
        'description' => t('Without giving access to at least one role, no-one other than the administrator (UID=1) can created protected nodes or view protected nodes'),
        'severity' => REQUIREMENT_ERROR
      );
    }

    // File attachment are not currently protected
    switch (variable_get('file_downloads', FILE_DOWNLOADS_PUBLIC)) {
    case FILE_DOWNLOADS_PRIVATE:
      $reqs['protected_node_attachments'] = array(
        'title' => t('Protected nodes attachments'),
        'value' => t('Private attachments are not yet protected by Protected node'),
        'description' => t('At this time this module doesn\'t protect your private files. This error will require an upgrade to get fixed. We unfortunately do not yet have a fix for this problem.'),
        'severity' => REQUIREMENT_ERROR
      );
      break;

    default:
      $reqs['protected_node_attachments'] = array(
        'title' => t('Protected nodes attachments'),
        'value' => t('Public attachments are never protected by Protected node'),
        'description' => t('Public attachments are by definition public and the Protected node module cannot intervene since your web server answers those requests on its own without any interventions by Drupal. This obviously means there is no way we could prevent the download of a public file.'),
        'severity' => REQUIREMENT_WARNING
      );
      break;

    }
  }

  return $reqs;
}

/**
 * Implementation of hook_schema().
 */
function protected_node_schema( ) {
  $schema['protected_nodes'] = array(
    'description' => t( 'The table to store the node - password hash pairs.' ),
    'fields' => array(
      'nid' => array(
        'description' => t( 'The primary identifier for a node' ),
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE
      ),
      'passwd' => array(
        'description' => t( 'The sha1 hashed password for the given node.' ),
        'type' => 'char',
        'length' => 40,
        'not null' => TRUE,
        'default' => ''
      )
    ),
    'indexes' => array(
      'protected_passwd' => array(
        'passwd'
      )
    ),
    'primary key' => array(
      'nid'
    )
  );

  return $schema;
}

/**
 * Implementation of hook_install().
 */
function protected_node_install( ) {
  drupal_install_schema( 'protected_node' );
  db_query( "UPDATE {system} SET weight = 80 WHERE name = 'protected_node' AND type = 'module'" );
}

/**
 * Implementation of hook_uninstall().
 */
function protected_node_uninstall( ) {
  drupal_uninstall_schema('protected_node');
  db_query("DELETE FROM {variable} WHERE name LIKE 'protected_node_%%'");
}

/**
 * Implementation of hook_update_N().
 *
 * We don't need a variable length column just 40 char one for the sha1 hash
 */
function protected_node_update_3( ) {
  $ret = array();

  db_change_field( $ret, 'protected_nodes', 'passwd', 'passwd', array(
    'type' => 'char',
    'length' => 40,
    'not null' => TRUE
  ) );

  return $ret;
}

/**
 * Implementation of hook_update-N()
 *
 * Altering node weight from 100 to 80
 * fixing issue #296685
 *
 */
function protected_node_update_4( ) {
  $ret = array();
  $ret[] = update_sql( "UPDATE {system} SET weight = 80 WHERE name = 'protected_node' AND type = 'module'" );

  return $ret;
}

// vim: ts=2 sw=2 et syntax=php
