<?php

/**
 * @file
 * Test protected node email functionality.
 */

/**
 * Configure protected_node to send email.
 */
class ProtectedNodeMail extends ProtectedNodeBaseTestCase {

  /**
   * {@inheritdoc}
   */
  public static function getInfo() {
    return array(
      'name' => 'Protected node email feature',
      'description' => "This tests mail features",
      'group' => 'Protected Node',
    );
  }

  /**
   * {@inheritdoc}
   */
  public function setUp() {
    parent::setUp();

    // Log in an Admin.
    $this->drupalLogin($this->adminUser);
    // Submit the configuration form.
    $protected_node_settings = array(
      'protected_node_use_global_password' => PROTECTED_NODE_PER_NODE_PASSWORD,
      'protected_node_email_activation' => 1,
    );
    $this->drupalPost('admin/config/content/protected_node', $protected_node_settings, t('Save configuration'));
  }

  /**
   * Test that a mail is send when a protected node is created.
   */
  public function testSendMail() {
    // Log in as Admin.
    $this->drupalLogin($this->adminUser);
    // Generate random password.
    $password = $this->randomName(10);
    // To parameter.
    $to = 'example@example.com';
    // Create a new page node.
    $this->createProtectedNode($password, $to);
    // Once the node created logout the User.
    $this->drupalLogout();

    $mails = $this->drupalGetMails();

    // Check mail subject.
    $this->assertMail('subject', protected_node_email_subject(), 'The last message subject was "My latest email"');

    // Check mail to parameter.
    $this->assertEqual($to, $mails[0]['to'], "The mail's to parameter is equal to " . $to, $this->group);
  }

  /**
   * Helper method to create a protected node.
   *
   * Please make sure the user has the permission to create the node before
   * calling the method.
   *
   * @param string $password
   *   A password.
   * @param string $to
   *   An email recipient.
   *
   * @return object.
   *   A node object.
   */
  public function createProtectedNode($password, $to) {
    // Add a new page node that is protected.
    $node_title = $this->randomName(8);
    $node_data = array(
      'title' => $node_title,
      'body[und][0][value]' => $this->randomName(32),
      'protected_node_is_protected' => TRUE,
      'protected_node_passwd[pass1]' => $password,
      'protected_node_passwd[pass2]' => $password,
      'protected_node_emails' => $to,
    );
    $this->drupalPost('node/add/page', $node_data, t('Save'));

    return $this->drupalGetNodeByTitle($node_title);
  }

}
