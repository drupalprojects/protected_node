<?php

/**
 * @file
 * Test protected node bulk actions functionality.
 */

/**
 * Configure protected_node to use mixin password.
 */
class ProtectedNodeBulkPassword extends ProtectedNodeBaseTestCase {

  /**
   * {@inheritdoc}
   */
  public static function getInfo() {
    return array(
      'name' => 'Protected node bulk actions feature',
      'description' => "This tests bulk actions features",
      'group' => 'Protected Node',
    );
  }

  /**
   * {@inheritdoc}
   */
  public function setUp() {
    parent::setUp();
    // Generate random password.
    $this->global_password = $this->randomName(10);

    // Log in an Admin.
    $this->drupalLogin($this->adminUser);
    // Submit the configuration form.
    $protected_node_settings = array(
      'protected_node_use_global_password' => PROTECTED_NODE_PER_NODE_AND_GLOBAL_PASSWORD,
      'protected_node_global_password_field[pass1]' => $this->global_password,
      'protected_node_global_password_field[pass2]' => $this->global_password,
    );
    $this->drupalPost('admin/config/content/protected_node', $protected_node_settings, t('Save configuration'));
  }

  /**
   * Test function.
   *
   * Test that the password has to be re-enter after clearing the sessions.
   */
  public function testClearSessions() {
    // Log in as Admin.
    $this->drupalLogin($this->adminUser);
    // Create a new page node.
    $node = $this->createProtectedNode();
    // Once the node created logout the user.
    $this->drupalLogout();

    // An authenticated user sees the node.
    $this->drupalLogin($this->normalAccessAllowedUser);
    $form = array('password' => $this->global_password);
    $this->drupalPost('node/' . $node->nid, $form, t('OK'));

    $text = $node->body[LANGUAGE_NONE][0]['value'];
    $this->assertText($text, "User with right permission can access a protected node with right password", $this->group);

    // Log in as Admin to clear sessions.
    $this->drupalLogin($this->adminUser);
    $this->drupalPost('admin/config/content/protected_node', array(), t('Clear sessions'));
    $this->drupalLogout();

    // An authenticated user sees the node.
    $this->drupalLogin($this->normalAccessAllowedUser);
    $this->drupalGet('node/' . $node->nid);

    $text = 'Protected page -- Enter password';
    $this->assertText($text, "User with right permission has to re-enter the password", $this->group);
  }

  /**
   * Helper method to create a protected node.
   *
   * Please make sure the user has the permission to create the node before
   * calling the method.
   *
   * @return object
   *   A node object.
   */
  public function createProtectedNode() {
    // Add a new page node that is protected.
    $node_title = $this->randomName(8);
    $node_data = array(
      'title' => $node_title,
      'body[und][0][value]' => $this->randomName(32),
      'protected_node_is_protected' => TRUE,
    );
    $this->drupalPost('node/add/page', $node_data, t('Save'));

    return $this->drupalGetNodeByTitle($node_title);
  }

}
