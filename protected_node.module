<?php
/*
 * Protected node module
 * Author: Mark Tolmacs
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 */

/**
 * Implementation of hook_help()
 */
function protected_node_help($section) {
	switch ($section) {
		case 'admin/modules#description':
			return t('With this module anybody who has edit protected content right can password protect his or her own node.');
			break;
	}
}

/**
 * Implementation of hook_perm()
 */
function protected_node_perm()
{
	return array('access protected content', 'edit protected content');
}

/**
 * Implementation of hook_form_alter()
 */
function protected_node_form_alter($form_id, &$form)
{
	if ($form['#id'] == 'node-form' && user_access('edit protected content'))
	{
		drupal_add_js(drupal_get_path('module', 'protected_node') . '/js/common.js');
		drupal_add_js(drupal_get_path('module', 'protected_node') . '/js/progressbar.js');
		drupal_add_js(drupal_get_path('module', 'protected_node') . '/js/passwordquality.js');

		$form['protected_node'] = array(
			'#type' => 'fieldset',
			'#description' => t('Here if you check the checkbox and provide a password your newly created node will be password protected.'),
			'#title' => t('Protected node'),
			'#collapsible' => TRUE,
			'#collapsed' => TRUE
		);
		$form['protected_node']['is_protected'] = array(
			'#type' => 'checkbox',
			'#title' => t('Node is protected'),
			'#description' => t('Check here if this content should be protected by a password.'),
			'#default_value' => $form['#node']->is_protected,
		);
		$form['protected_node']['password1'] = array(
			'#prefix' => '<div id="the_progressbar"></div>',  // Password strength meter
			'#type' => 'password',
			'#title' => t('Password'),
			'#description' => t('Enter node password here.'),
			'#size' => 20,
			'#default_value' => $form['#node']->password1,
		);
		$form['protected_node']['password2'] = array(
			'#type' => 'password',
			'#title' => t('Password again'),
			'#description' => t('Enter again node password here.'),
			'#size' => 20,
			'#default_value' => $form['#node']->password2,
		);
	}
}

/**
 * Implementation of hook_nodeapi()
 */
function protected_node_nodeapi(&$node, $op, $arg = 0, $page = 0) {
	global $user;

	switch ($op) {
		case 'load':
      		$output['is_protected'] = db_result(db_query('SELECT count(*) FROM {protected_nodes} WHERE nid = %d', $node->nid)) > 0;
      		return $output;
      		break;
    	case 'delete':
      		db_query('DELETE FROM {protected_nodes} WHERE nid = %d', $node->nid);
      		break;
    	case 'insert':
    		if ($node->is_protected  &&	(!empty($node->password1) || isset($_SESSION['_protected_node']['entered_password']))) {
		    		$pwd = isset($_SESSION['_protected_node']['entered_password']) ? $_SESSION['_protected_node']['entered_password'] : $node->password1;
		    		unset($_SESSION['_protected_node']['entered_password']);
	      			db_query('INSERT INTO {protected_nodes} (nid, passwd) VALUES (%d, \'%s\')', $node->nid, $pwd);
  			}
      		break;
      	case 'validate':
      		if ($node->is_protected && (!empty($node->password1) || isset($_SESSION['_protected_node']['entered_password']))) {
		      		if ($node->password1 !== $node->password2) {
			      		form_set_error('password2', t('Password fields at protected node must match!'));
		      		}
		      		if (!isset($_SESSION['_protected_node']['entered_password'])) {
			      		$_SESSION['_protected_node']['entered_password'] = $node->password1;
		      		}
  			}
      		break;
    	case 'update':
    		if ($node->is_protected && (!empty($node->password1) || isset($_SESSION['_protected_node']['entered_password']))) {
	    			if (db_result(db_query('SELECT count(*) FROM {protected_nodes} WHERE nid = %d', $node->nid)) > 0) {
	    				$pwd = isset($_SESSION['_protected_node']['entered_password']) ? $_SESSION['_protected_node']['entered_password'] : $node->password1;
		    			unset($_SESSION['_protected_node']['entered_password']);
						db_query('UPDATE {protected_nodes} SET passwd = \'%s\' WHERE nid = %d', $pwd, $node->nid);
	    			}
	    			else {
	    				protected_node_nodeapi($node, 'insert', $arg, $page);
	    			}
  			}
      		break;
      	case 'view':
      		if ($node->is_protected && !$arg && $node->uid !== $user->uid) {
      			// If node is protected and not teaser and not owner of node
	      		if (!isset($_SESSION['_protected_node']['passwords'][$node->nid])) {
		      		drupal_goto('protected-node', 'from=' . $node->nid);
		      	}
	      	}
      		break;
  	}
}

/**
 * Implementation of hook_menu()
 */
function protected_node_menu($may_cache) {
  $items = array();
  $may_cache = true;
  if ($may_cache){
    $items[] = array(
      'path' => 'protected-node',
      'title' => t('Protected node - Enter Password'),
      'description' => t('Here you can enter the password for the node'),
      'callback' => 'drupal_get_form',
      'callback arguments' => 'protected_node_enterpassword',
      'access' => user_access('access protected content'),
      'type' => MENU_CALLBACK
      );
  }

  return $items;
}

/**
 * Implementation of hook_file_download()
 */
function protected_node_file_download($file)
{
	global $user;

	$db_file = db_result(db_query('SELECT n.nid FROM {files} f, {protected_nodes} pn, {node} n WHERE pn.nid = f.nid AND f.nid = n.nid AND f.filename = \'%s\'', $file));
	if(db_error() || $db_file === FALSE || $user->uid == $db_file || $_SESSION['_protected_node']['passwords'][$db_file] ) {
		return array();
	} else {
		return -1;
	}
}

/*********************
 * Helper functions  *
 *********************/

/**
 * Simple function to make sure we don't respond with grants when disabling ourselves.
 */
function protected_node_disabling($set = NULL)
{
	static $disabling = false;

	if ($set !== NULL)
	{
		$disabling = $set;
	}

	return $disabling;
}

/**
 *
 */
function protected_node_enterpassword() {
	if(!isset($_GET['from'])) {
		// Illegal call
		watchdog('protected_node', t('Illegal call to /protected-node'), WATCHDOG_WARN);
		drupal_goto('');
	}

	$form['protected_node_enterpassword'] = array(
			'#type' => 'fieldset',
			'#description' => t('The node you are trying to view is password protected. Please enter password below to proceed.'),
			'#collapsible' => FALSE
	);
	$form['protected_node_enterpassword']['password'] = array(
			'#type' => 'password',
			'#title' => t('Node password'),
			'#size' => 20
	);
	$form['protected_node_enterpassword']['from'] = array(
			'#type' => 'hidden',
			'#value' => $_GET['from']
	);
	$form['protected_node_enterpassword']['submit'] = array(
			'#type' => 'submit',
			'#value' => t('OK'),
	);

	return $form;
}

/**
 *
 */
function protected_node_enterpassword_validate($form_id, $form) {
	$cnt = db_result(db_query('SELECT COUNT(*) FROM {protected_nodes} WHERE passwd = \'%s\' AND nid = %d', $form['password'], $form['from']));
	if($cnt < 1)
	{
		form_set_error('password', t('Incorrect password!'));
	}
}

/**
 *
 */
function protected_node_enterpassword_submit($form_id, $form) {
	$_SESSION['_protected_node']['passwords'][$form['from']] = TRUE;
	drupal_goto('node/' . $form['from']);
}